@model Cf.ViewModels.ProductVwViewModel

@using Cf.Services;
@using Cf.Data;

<!-- Details Card Starts -->

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.Details @ViewBag.ModuleName</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse">
                <div class="card-block">
                    <form class="form">
                        <div class="form-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductId, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductId, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductId)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductId" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductId)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductEmployeeId, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeId, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeId)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductEmployeeId" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeId)" disabled />
                                        <input type="hidden" name="Product.Id" id="txtProductId" class="form-control" value="@Html.DisplayFor(model => model.Instance.Id)" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductEmployeeFullName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeFullName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeFullName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductEmployeeFullName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeFullName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductEmployeeDepartmentName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductEmployeeDepartmentName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentName)" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductEmployeeDepartmentSalaryWorkPlaceName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductEmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductProductTypeGuarantorsCount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeGuarantorsCount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeGuarantorsCount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductProductTypeGuarantorsCount" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeGuarantorsCount)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductEmployeeCategoryName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeCategoryName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeCategoryName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductEmployeeCategoryName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductEmployeeCategoryName)" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductProductTypeName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductProductTypeName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductProductTypeRate, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeRate, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeRate)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductProductTypeRate" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypeRate)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestProductProductTypePaymentGroupName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypePaymentGroupName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypePaymentGroupName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestProductProductTypePaymentGroupName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestProductProductTypePaymentGroupName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestDate, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestDate, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestDate)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestDate" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestDate)" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestAmount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestAmount" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestAmount)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestRequestStatusName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestRequestStatusName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestRequestStatusName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestRequestStatusName" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestRequestStatusName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.RequestNotes, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestNotes, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestNotes)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtRequestNotes" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.RequestNotes)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.NetIncome, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.NetIncome, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.NetIncome)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtNetIncome" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.NetIncome)" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.TotalDeduction, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.TotalDeduction, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.TotalDeduction)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtTotalDeduction" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.TotalDeduction)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.PaymentPeriod, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.PaymentPeriod, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.PaymentPeriod)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtPaymentPeriod" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.PaymentPeriod)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.Installment, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.Installment, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.Installment)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtInstallment" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.Installment)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.NetAmount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.NetAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.NetAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtNetAmount" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.NetAmount)" disabled />
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.ProfitAmount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.ProfitAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.ProfitAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtProfitAmount" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.ProfitAmount)" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @{
                                            EmployeeProductCalculatorResult result = ViewBag.Calculator;
                                            GetEmployeeSolvencyResult solvencyResult = ViewBag.Solvency;
                                        }
                                        @if (result == null || solvencyResult == null)
                                        {

                                        }
                                        else
                                        {
                                            if (result.Amount > result.MaxAmount)
                                            {
                                                <label id="AmountSituation" style="color:red">
                                                   @ViewBag.AmountSituationRejected
                                                </label><br />
                                            }
                                            else
                                            {
                                                <label id="AmountSituation" style="color:green">
                                                  @ViewBag.AmountSituationAccepted
                                                </label><br />
                                            }
                                            if (solvencyResult.IncomeSolvency < solvencyResult.MaxAllowedDebt)
                                            {
                                                <label id="DebtsSituation" style="color:green">
                                                    @ViewBag.DebtsSituationAccepted
                                                </label><br />
                                            }
                                            else
                                            {
                                                <label id="DebtsSituation" style="color:red">
                                                   @ViewBag.DebtsSituationRejected
                                                </label><br />
                                            }
                                            if (solvencyResult.NetSalarySolvency > 0)
                                            {
                                                <label id="InstallmentSituation" style="color:green">
                                                    @ViewBag.InstallmentSituationAccepted
                                                </label><br />
                                            }
                                            else
                                            {
                                                <label id="InstallmentSituation" style="color:red">
                                                   @ViewBag.InstallmentSituationRejected
                                                </label><br />
                                            }
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="button" class="btn btn-primary mr-1">
                                @Html.ActionLink((string)@ViewBag.Update, "Edit", new
                                   {
                                       request = Model.Instance.Id
                                   })
                            </button>
                            <button type="button" class="btn btn-warning">
                                @Html.ActionLink((string)@ViewBag.Back, "Index")
                            </button>
                        </div>
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>

<!-- Details Card Ends -->

<!-- Details Guarantors Starts -->
<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">
                    @ViewBag.TitleGuarantor @if (Model.RefundableProductVwViewModel.GuarantorVwViewModel.List.Count == 0)
                    {<span class="tag tag-default">@Model.RefundableProductVwViewModel.GuarantorVwViewModel.List.Count</span>}
                    else
                    {<span class="tag tag-danger">@Model.RefundableProductVwViewModel.GuarantorVwViewModel.List.Count</span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-success createLink" data-original-title="@ViewBag.Insert" id="CreateG" data-url="@Url.Action("CreateGuarantorWithStatement", "LoanRequestViewModel" , new { Area="Loans"})">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
                            <tr>
                                @*<th>
                                        @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.Id)
                                    </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.SubNumber)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeId)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeFullName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeCategoryName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.GuarantorStatusName)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RefundableProductVwViewModel.GuarantorVwViewModel.List)
                            {
                                <tr>
                                    @*<td>
                                            @Html.DisplayFor(modelItem => item.Id)
                                        </td>*@
                                    <td>
                                        @Html.DisplayFor(modelItem => item.SubNumber)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.EmployeeId)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.EmployeeFullName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.EmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.EmployeeCategoryName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.GuarantorStatusName)
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                            <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("EditGuarantorWithStatement", "LoanRequestViewModel", new { Area="Loans"})">@ViewBag.Update</button>
                                            <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteGuarantorWithStatement", "LoanRequestViewModel", new { Area="Loans"})">@ViewBag.Delete</button>

                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Details Guarantors Ends -->

<!-- Details ExceptionalIncome Starts -->
<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title"></h4>
                <h4 class="card-title">
                    @ViewBag.ExceptionalIncome
                    @if (Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome).ToList().Count == 0)
                    {<span class="tag tag-default">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome).ToList().Count</span>}
                    else
                    {<span class="tag tag-danger">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome).ToList().Count</span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-success createLinkAmount" data-original-title="@ViewBag.Insert" id="CreateExceptionalAmount" data-id='@ExceptionalAmountTypeEnum.ExceptionalIncome.GetHashCode()' data-url="@Url.Action("CreateExceptionalAmount", "LoanRequestViewModel", new { Area="Loans"})">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table id="Result" class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
                            <tr>
                                @*<th>
                                        @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Id)
                                    </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Amount)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.ExceptionalAmountTypeIsIncome)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome))
                            {
                                <tr>
                                    @*<td>
                                            @Html.DisplayFor(modelItem => item.Id)
                                        </td>*@
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Amount)
                                    </td>
                                    <td>
                                        @Html.CheckBoxFor(modelItem => item.ExceptionalAmountTypeIsIncome, new { @disabled = "disabled" })
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                            <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("editExceptionalAmount", "LoanRequestViewModel", new { Area="Loans"})">@ViewBag.Update</button>


                                            <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteExceptionalAmount", "LoanRequestViewModel", new { Area="Loans"})">@ViewBag.Delete</button>

                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Details ExceptionalIncome Ends -->


<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title"></h4>
                <h4 class="card-title">
                    @ViewBag.ExceptionalDeduction
                    @if (Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction).ToList().Count == 0)
                    {<span class="tag tag-default">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction).ToList().Count </span>}
                    else
                    {<span class="tag tag-danger">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction).ToList().Count </span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-success createLinkAmount" data-original-title="@ViewBag.Insert" id="CreateExceptionalAmount" data-id="@ExceptionalAmountTypeEnum.ExceptionalDeduction.GetHashCode()" data-url="@Url.Action("createExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table id="Result" class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
                            <tr>
                                @*<th>
                                        @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Id)
                                    </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Amount)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.ExceptionalAmountTypeIsIncome)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction))
                            {
                                <tr>
                                    @*<td>
                                            @Html.DisplayFor(modelItem => item.Id)
                                        </td>*@
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Amount)
                                    </td>
                                    <td>
                                        @Html.CheckBoxFor(modelItem => item.ExceptionalAmountTypeIsIncome, new { @disabled = "disabled" })
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                            <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("editExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Update</button>


                                            <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Delete</button>

                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title"></h4>
                <h4 class="card-title">
                    @ViewBag.NetDeduction
                    @if (Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction).ToList().Count == 0)
                    {<span class="tag tag-default">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction).ToList().Count</span>}
                    else
                    {<span class="tag tag-danger">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction).ToList().Count</span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-success createLinkAmount" data-original-title="@ViewBag.Insert" id="CreateExceptionalAmount" data-id="@ExceptionalAmountTypeEnum.NetDeduction.GetHashCode()" data-url="@Url.Action("CreateExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table id="Result" class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
                            <tr>
                                @*<th>
                                        @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Id)
                                    </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Amount)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.ExceptionalAmountTypeIsIncome)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction))
                            {
                                <tr>
                                    @*<td>
                                            @Html.DisplayFor(modelItem => item.Id)
                                        </td>*@
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Amount)
                                    </td>
                                    <td>
                                        @Html.CheckBoxFor(modelItem => item.ExceptionalAmountTypeIsIncome, new { @disabled = "disabled" })
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                            <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("EditExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Update</button>


                                            <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Delete</button>

                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="FieldsModal" tabindex="-1" role="dialog" aria-labelledby="fieldsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@ViewBag.No</span></button>
                <h4 class="modal-title" id="fieldsModalLabel">  </h4>
            </div>
            <div id="fieldsModalBody" class="modal-body">

            </div>

        </div>
    </div>
</div>
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@ViewBag.No</span></button>
                <h4 class="modal-title" id="deleteModalLabel">@ViewBag.Delete</h4>
            </div>
            <div id="deleteModalBody" class="modal-body"></div>

        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/Adminjquiry")
    <script>
        $(document).ready(function () {

            $('table').each(function (e) {

                var table = $(this).context;
                var tbody = table.tBodies[0];
                var len = table.rows.length;
                if (len == 1) {
                    // Create an empty <tr> element
                    var row = tbody.insertRow(0);

                    //// Insert new cell
                    var cell1 = row.insertCell(0);
                    cell1.colSpan = 12; cell1.align = "center";
                    cell1.innerText = '@ViewBag.NoRecords';
                }

            });



        });
        $(function () {
            $("#FieldsModal").modal("hide");  // initially hides the modal pop-up until needed

            $(".createLink").on("click", function () {
                var url = $(this).data("url");

                $.get(url, { id: $("#txtProductId").val() }, function (data) {
                    $("#fieldsModalBody").html(data);

                    $("#FieldsModal").modal("show");  // shows the modal pop-up now that we have our partial view
                });

            });
            $(".createLinkAmount").on("click", function () {
                var url = $(this).data("url");
                var typeAmount = $(this).data("id");
                console.log(typeAmount);
                $.get(url, { id: $("#txtProductId").val(), Type: typeAmount }, function (data) {
                    $("#fieldsModalBody").html(data);

                    $("#FieldsModal").modal("show");  // shows the modal pop-up now that we have our partial view
                });

            });
            $(".editLink").on("click", function () {
                var url = $(this).data("url");

                $.get(url, { id: $(this).data("id") }, function (data) {
                    $("#fieldsModalBody").html(data);

                    $("#FieldsModal").modal("show");  // shows the modal pop-up now that we have our partial view
                });


            });
            $(function () {
                $("#deleteModal").modal("hide");  // initially hides the modal pop-up until needed

                $(".deleteLink").on("click", function () {
                    var url = $(this).data("url");
                    $.get(url, { id: $(this).data("id"), ProductId: $("#txtProductId").val() }, function (data) {
                        $("#deleteModalBody").html(data);

                        $("#deleteModal").modal("show");  // shows the modal pop-up now that we have our partial view
                    });

                });
            });
        });
    </script>

    <script>

        (function ($) {
            $.widget("custom.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                      .addClass("custom-combobox ")
                      .insertAfter(this.element);

                    this.element.hide();
                    this._createAutocomplete();
                    //this._createShowAllButton();
                },

                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                      value = selected.val() ? selected.text() : "";

                    this.input = $("<input>")
                      .appendTo(this.wrapper)
                      .val(value)
                      .attr("title", "")
                      .addClass("form-control custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                      .autocomplete({
                          delay: 0,
                          minLength: 0,
                          source: $.proxy(this, "_source")
                      })
                      .tooltip({
                          tooltipClass: "ui-state-highlight"
                      });

                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                      valueLowerCase = value.toLowerCase(),
                      valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    this.input
                      .val("")
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.data("ui-autocomplete").term = "";
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });
        })(jQuery);
        $(document).ready(function () {
            $('.combobox').combobox();

        });

    </script>

}


