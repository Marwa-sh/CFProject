@model Cf.ViewModels.LoanRequestViewModel
@using Cf.Data;
@using (Html.BeginForm())
{

    <div class="row">
        <div class="col-xs-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">@ViewBag.Action @ViewBag.ModuleName</h4>
                    <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                    <div class="heading-elements">
                        <ul class="list-inline mb-0">
                            <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                            <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                            <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-body collapse in">
                    <div class="card-block">
                        <form class="form">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            @*@Html.Partial("~/Views/Product/Edit.cshtml", Model)
                                @Html.Partial("~/Views/Request/Edit.cshtml", Model)

                                @Html.Partial("~/Views/LoanRequest/Edit.cshtml", Model)
                                @Html.Partial("~/Views/RefundableProduct/Edit.cshtml", Model)*@


                            <div class="form-body">
                                <input type="hidden" name="RequestProduct.Id" id="txtProductId" class="form-control" value="@Html.DisplayFor(model => model.RequestProduct.Id)" />
                                <input type="hidden" name="RequestProduct.Amount" id="txtProductAmount" class="form-control" value="@Html.DisplayFor(model => model.RequestProduct.Amount)" />

                                <input type="hidden" name="Request.Product" id="txtRequestProduct" class="form-control" value="@Html.DisplayFor(model => model.Request.Product)" />
                                <input type="hidden" name="Request.Cost" id="txtRequestCost" class="form-control" value="@Html.DisplayFor(model => model.Request.Cost)" />
                                <input type="hidden" name="Request.RequestStatus" id="txtRequestStatus" class="form-control" value="@Html.DisplayFor(model => model.Request.RequestStatus)" />
                                <input type="hidden" name="Request.BypassStatus" id="txtRequestBypassStatus" class="form-control" value="@Html.DisplayFor(model => model.Request.BypassStatus)" />

                                <input type="hidden" name="LoanRequest.Request" id="txtLoanRequest" class="form-control" value="@Html.DisplayFor(model => model.LoanRequest.Request)" />

                                <input type="hidden" name="RequestProductProductRefundableProduct.Product" id="txtRequestProductProductRefundableProduct" class="form-control" value="@Html.DisplayFor(model => model.RequestProductProductRefundableProduct.Product)" />

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.RequestProduct.Employee, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestProduct.Employee)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.RequestProduct.Employee, new { htmlAttributes = new { @class = "form-control" } })
                                            @*@Html.DropDownListFor(model => model.RequestProduct.Employee, (SelectList)@ViewBag.EmployeeList, htmlAttributes: new { @class = "form-control combobox" })*@
                                            @Html.ValidationMessageFor(model => model.RequestProduct.Employee, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.RequestProduct.ProductType, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestProduct.ProductType)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.DropDownListFor(model => model.RequestProduct.ProductType, (SelectList)@ViewBag.ProductTypeList, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.RequestProduct.ProductType, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Request.Amount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Request.Amount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.Request.Amount, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Request.Amount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">

                                            @Html.LabelFor(model => model.RequestProductProductRefundableProduct.PaymentPeriod, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestProductProductRefundableProduct.PaymentPeriod)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.RequestProductProductRefundableProduct.PaymentPeriod, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.RequestProductProductRefundableProduct.PaymentPeriod, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">

                                            <button type="button" id="discover" class="btn btn-primary mr-1" style="margin-top: 27px;">
                                                @ViewBag.Discover
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.LoanRequest.TotalDeduction, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.LoanRequest.TotalDeduction)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.LoanRequest.TotalDeduction, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.LoanRequest.TotalDeduction, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.LoanRequest.NetIncome, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.LoanRequest.NetIncome)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.LoanRequest.NetIncome, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.LoanRequest.NetIncome, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Request.Date, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Request.Date)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.TextBoxFor(model => model.Request.Date, "{0:dd/MM/yyyy}", htmlAttributes: new { @class = "form-control IsDate", @Value = System.DateTime.Now.ToShortDateString() })
                                            @Html.ValidationMessageFor(model => model.Request.Date, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Request.Attachment, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Request.Attachment)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.Request.Attachment, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Request.Attachment, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-2">

                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Request.Notes, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Request.Notes)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.Request.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Request.Notes, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                  
                                </div>


                                @{ 
                                    EmployeeProductCalculatorResult resultCalculator = (EmployeeProductCalculatorResult)ViewBag.Calculations;

                                }

                                <ul class="nav nav-pills  ">
                                    <li class="nav-item">
                                        <a class="nav-link active" id="active-tab" data-toggle="tab" href="#Employee" aria-controls="active" aria-expanded="false">@ViewBag.Employee</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link " id="link-tab" data-toggle="tab" href="#Loan" aria-controls="link" aria-expanded="true">@ViewBag.Loan</a>
                                    </li>
                                </ul>
                                <div class="tab-content px-1 pt-1">
                                    <div role="tabpanel" class="tab-pane fade active in" id="Employee" aria-labelledby="active-tab" aria-expanded="false">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.FullName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.FullName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="FullName" value="@resultCalculator.FullName" class="form-control" name="FullName" />
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.DepartmentName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.DepartmentName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="DepartmentName" value="@resultCalculator.DepartmentName" class="form-control" name="DepartmentName" />
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.DepartmentSalaryWorkPlaceName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.DepartmentSalaryWorkPlaceName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="DepartmentSalaryWorkPlaceName" value="@resultCalculator.DepartmentSalaryWorkPlaceName" class="form-control" name="DepartmentSalaryWorkPlaceName" />
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.EmployeeStatusName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.EmployeeStatusName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="EmployeeStatusName" value="@resultCalculator.EmployeeStatusName" class="form-control" name="EmployeeStatusName" />
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.CategoryName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.CategoryName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="CategoryName" value="@resultCalculator.CategoryName" class="form-control" name="CategoryName" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.Seniority, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.Seniority)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="Seniority" value="@resultCalculator.Seniority" class="form-control" name="Seniority" />
                                                    @*<label id="Seniority" name="Seniority"></label>*@
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.MinSeniority, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.MinSeniority)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="MinSeniority" value="@resultCalculator.MinSeniority" class="form-control" name="MinSeniority" />
                                                    @*<label id="MinSeniority" name="MinSeniority"></label>*@
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.MinReusePeriod, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.MinReusePeriod)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="MinReusePeriod" value="@resultCalculator.MinReusePeriod" class="form-control" name="MinReusePeriod" />
                                                    @*<label id="MinReusePeriod" name="MinReusePeriod"></label>*@
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                   @Html.LabelFor(model => model.EmployeeProductCalculatorResult.CersStartDate, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.CersStartDate)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="CersStartDate" class="form-control" value="@resultCalculator.CersStartDate" name="CersStartDate" />
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row">

                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.CfStartDate, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.CfStartDate)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="CfStartDate"  value="@resultCalculator.CfStartDate" class="form-control" name="CfStartDate" />
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.LeaveDate, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.LeaveDate)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="LeaveDate" value="@resultCalculator.LeaveDate" class="form-control" name="LeaveDate" />
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                   @Html.LabelFor(model => model.EmployeeProductCalculatorResult.LeaveReason, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.LeaveReason)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="LeaveReason" value="@resultCalculator.LeaveReason" class="form-control" name="LeaveReason" />
                                                </div>
                                            </div>

                                        </div>

                                    </div>
                                    <div class="tab-pane fade " id="Loan" role="tabpanel" aria-labelledby="link-tab" aria-expanded="true">

                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.Installment, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.Installment)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input type="text" id="Installment" name="RequestProductProductRefundableProduct.Installment" class="form-control" value="@Html.DisplayFor(model => model.RequestProductProductRefundableProduct.Installment)" disabled />
                                                    @*<label class="form-control-label" name="InstallmentFor">Installment</label>
                                                    <input disabled id="Installment" class="form-control" name="Installment" />*@
                                                    
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                   @Html.LabelFor(model => model.EmployeeProductCalculatorResult.NetAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.NetAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input type="text" id="NetAmount" name="RequestProductProductRefundableProduct.NetAmount" class="form-control" value="@Html.DisplayFor(model => model.RequestProductProductRefundableProduct.NetAmount)" disabled />
                                                    @*<label class="form-control-label" name="NetAmountFor">NetAmount</label>
                                                    <input disabled id="NetAmount" class="form-control" name="NetAmount" />*@
                                                   
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.ProfitAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.ProfitAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input type="text" id="ProfitAmount" name="RequestProductProductRefundableProduct.ProfitAmount" class="form-control" value="@Html.DisplayFor(model => model.RequestProductProductRefundableProduct.ProfitAmount)" disabled />

                                                    @*<label class="form-control-label" name="ProfitAmountFor">ProfitAmount</label>
                                                    <input disabled id="ProfitAmount" class="form-control" name="ProfitAmount" />*@
                                                    
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.MaxAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.MaxAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="MaxAmount" value="@resultCalculator.MaxAmount" class="form-control" name="MaxAmount" />
                                                    
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                   @Html.LabelFor(model => model.EmployeeProductCalculatorResult.GuarantorsCount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.GuarantorsCount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="GuarantorsCount"value="@resultCalculator.GuarantorsCount" class="form-control" name="GuarantorsCount" />
                                                    
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmployeeProductCalculatorResult.Rate, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.EmployeeProductCalculatorResult.Rate)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                                    <input disabled id="Rate" value="@resultCalculator.Rate" class="form-control" name="Rate" />
                                          
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    @Html.Label("Status")
                                                    <input disabled id="ResultStatus" class="form-control" name="ResultStatus" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>




                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary mr-1">
                                    @ViewBag.Save
                                </button>
                                <button type="button" class="btn btn-warning">
                                    @Html.ActionLink((string)ViewBag.Back, "Index")
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@section Scripts {
   @Scripts.Render("~/bundles/jqueryval")

    <script>

        (function ($) {
            $.widget("custom.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                      .addClass("custom-combobox ")
                      .insertAfter(this.element);

                    this.element.hide();
                    this._createAutocomplete();
                   // this._createShowAllButton();
                },

                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                      value = selected.val() ? selected.text() : "";

                    this.input = $("<input>")
                      .appendTo(this.wrapper)
                      .val(value)
                      .attr("title", "")
                      .addClass("form-control custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                      .autocomplete({
                          delay: 0,
                          minLength: 0,
                          source: $.proxy(this, "_source")
                      })
                      .tooltip({
                          tooltipClass: "ui-state-highlight"
                      });

                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                //_createShowAllButton: function () {
                //    var input = this.input,
                //      wasOpen = false;

                //    $("<a>")
                //      .attr("tabIndex", -1)
                //      .tooltip()

                //      .appendTo(this.wrapper)
                //      .button({
                //          icons: {
                //              primary: "ui-icon-triangle-1-s"
                //          },
                //          text: false
                //      })
                //      .removeClass("ui-corner-all")
                //      .addClass("custom-combobox-toggle ui-corner-right")
                //      .mousedown(function () {
                //          wasOpen = input.autocomplete("widget").is(":visible");
                //      })
                //      .click(function () {
                //          input.focus();

                //          // Close if already visible
                //          if (wasOpen) {
                //              return;
                //          }

                //          // Pass empty string as value to search for, displaying all results
                //          input.autocomplete("search", "");
                //      });
                //},

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                      valueLowerCase = value.toLowerCase(),
                      valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    this.input
                      .val("")
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.data("ui-autocomplete").term = "";
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });
        })(jQuery);
        $(document).ready(function () {
            $('.combobox').combobox();

        });

        $(function () {
            $.validator.addMethod('date',
            function (value, element) {
                if (this.optional(element)) {
                    return true;
                }
                var ok = true;
                try {
                    $.datepicker.parseDate('dd/mm/yy', value);
                }
                catch (err) {
                    ok = false;
                }
                return ok;
            });
            $(".IsDate").datepicker({ dateFormat: 'dd/mm/yy', changeYear: true });
        });
    </script>

<script>
        $(document).ready(function () {

            $(window).keydown(function (e) {
                if (e.keyCode == 13) {
                    $('#discover').click();
                    event.preventDefault();
                    return false;
                }
            });
        });
        $(function () {

            $("#discover").click(function () {

                var productId = $("#RequestProduct_ProductType").val();
                var employeeId = $("#RequestProduct_Employee").val();
                var amount = $("#Request_Amount").val();
                var period=$("#RequestProductProductRefundableProduct_PaymentPeriod").val();

                if (productId == '' || employeeId == '' || amount == '' || period == '')
                {
                    swal("", "الحقول التالية مطلوبة: اسم الموظف، نوع السلفة، المبلغ والمدة", "error");
                }
                else {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action( "Calculate", "LoanRequestViewModel")',// "/LoanRequestViewModel/Calculate",
                        data: '{employeeId: ' + employeeId + ', productTypeId:' + productId + ',amount: ' + amount + ',period: ' + period + '}'
                   ,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            for (var i = 0; i < response.length; i++) {
                                var temp = response[i];

                                var CersStartDate = temp.CersStartDate.replace('/Date(', '');
                                CersStartDate = CersStartDate.replace(')/', '');
                                var dateCersStartDate = new Date(parseInt(CersStartDate));


                                var CfStartDate = temp.CfStartDate.replace('/Date(', '');
                                CfStartDate = CfStartDate.replace(')/', '');

                                var dateCfStartDate = new Date(parseInt(CfStartDate));


                                // Employee Info
                                $("#MaxAmount").val(temp.MaxAmount);
                                $("#Seniority").val(temp.Seniority);
                                $("#MinSeniority").val(temp.MinSeniority);
                                $("#MinReusePeriod").val(temp.MinReusePeriod);
                                $("#CersStartDate").val(dateCersStartDate.toLocaleDateString());
                                $("#CfStartDate").val(dateCfStartDate.toLocaleDateString());
                                $("#LeaveDate").val(temp.LeaveDate);
                                $("#LeaveReason").val(temp.LeaveReason);
                                $("#DepartmentName").val(temp.DepartmentName);
                                $("#DepartmentSalaryWorkPlaceName").val(temp.DepartmentSalaryWorkPlaceName);
                                $("#EmployeeStatusName").val(temp.EmployeeStatusName);
                                $("#CategoryName").val(temp.CategoryName);
                                $("#FullName").val(temp.FullName);

                                // Loan Info
                                $("#Installment").val(temp.Installment);
                                $("#NetAmount").val(temp.NetAmount);
                                $("#ProfitAmount").val(temp.ProfitAmount);
                                $("#Rate").val(temp.Rate);
                                $("#GuarantorsCount").val(temp.GuarantorsCount);

                                if (amount > temp.MaxAmount) {
                                    $("#ResultStatus").val('@ViewBag.Exceeds');
                                    $("#ResultStatus").css("color", "red");
                                }
                                else {
                                    $("#ResultStatus").val('@ViewBag.Good');
                                    $("#ResultStatus").css("color", "green");
                                }
                            }


                        },
                        failure: function (response) {
                            alert(response.responseText);
                        },
                        error: function (response) {
                            alert(response.responseText);
                        }
                    });
                }

            });
        });
</script>
}
