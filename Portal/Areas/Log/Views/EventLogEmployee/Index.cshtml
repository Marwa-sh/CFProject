@model Cf.ViewModels.EventLogVwViewModel
    <h1>@ViewBag.Title ··„ÊŸ›Ì‰</h1>
<div class="form-horizontal">
    <h4>@ViewBag.ModuleName</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @using (Html.BeginForm())
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Selector.EventStatusNameContains, new Dictionary<string, Object>
                { { "class", "control-label col-md-2" },
                  {"title", Html.ToolTipMessageFor(model => model.Selector.EventStatusNameContains)},
                  {"data-toggle", "tooltip"},
                  {"data-placement", "bottom"}
                })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Selector.EventStatusNameContains, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @*@Html.LabelFor(model => model.Selector.MinDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
            @Html.LabelFor(model => model.Selector.MinDate, new Dictionary<string, Object>
                { { "class", "control-label col-md-2" },
                  {"title", Html.ToolTipMessageFor(model => model.Selector.MinDate)},
                  {"data-toggle", "tooltip"},
                  {"data-placement", "bottom"}
                })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Selector.MinDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @*@Html.LabelFor(model => model.Selector.MaxDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
            @Html.LabelFor(model => model.Selector.MaxDate, new Dictionary<string, Object>
                { { "class", "control-label col-md-2" },
                  {"title", Html.ToolTipMessageFor(model => model.Selector.MaxDate)},
                  {"data-toggle", "tooltip"},
                  {"data-placement", "bottom"}
                })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Selector.MaxDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @*@Html.LabelFor(model => model.Selector.User, htmlAttributes: new { @class = "control-label col-md-2" })*@
            @Html.LabelFor(model => model.Selector.User, new Dictionary<string, Object>
                { { "class", "control-label col-md-2" },
                  {"title", Html.ToolTipMessageFor(model => model.Selector.User)},
                  {"data-toggle", "tooltip"},
                  {"data-placement", "bottom"}
                })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Selector.User, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@ViewBag.Search" class="btn btn-default" />
            </div>
        </div>
    }
</div>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Instance.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Instance.User)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Instance.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Instance.EventStatusName)
            </th>
            <th width="2000">
                @Html.DisplayNameFor(model => model.Instance.Parameters)
            </th>
        </tr>

        @foreach (var item in Model.List)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EventStatusName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.Raw(item.Html)
                </td>
            </tr>
        }
    </table>
