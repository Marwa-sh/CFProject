@model Cf.ViewModels.LoanVwViewModel
	<div class="row">
        <div class="col-xs-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">@ViewBag.Action @ViewBag.ModuleName</h4>
                    <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                    <div class="heading-elements">
                        <ul class="list-inline mb-0">
                            <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                            <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                            <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-body collapse in">
                    <div class="card-block">
                        <form class="form">
                            <div class="form-body">
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductId, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductId, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductId)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductId" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductId)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductEmployeeId, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductEmployeeId, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductEmployeeId)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductEmployeeId" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductEmployeeId)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductEmployeeFullName, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductEmployeeFullName, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductEmployeeFullName)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductEmployeeFullName" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductEmployeeFullName)" disabled />
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductEmployeeDepartmentSalaryWorkPlaceName, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductEmployeeDepartmentSalaryWorkPlaceName, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductEmployeeDepartmentSalaryWorkPlaceName)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductEmployeeDepartmentSalaryWorkPlaceName" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductEmployeeDepartmentSalaryWorkPlaceName)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductEmployeeCategoryName, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductEmployeeCategoryName, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductEmployeeCategoryName)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductEmployeeCategoryName" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductEmployeeCategoryName)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductProductTypeName, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductProductTypeName, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductProductTypeName)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductProductTypeName" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductProductTypeName)" disabled />
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductProductTypeRate, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductProductTypeRate, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductProductTypeRate)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductProductTypeRate" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductProductTypeRate)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.ProductAmount, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.ProductAmount, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductAmount)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtProductAmount" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductAmount)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanDecisionNumber, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanDecisionNumber, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanDecisionNumber)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanDecisionNumber" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanDecisionNumber)" disabled />
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanDecisionDate, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanDecisionDate, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanDecisionDate)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanDecisionDate" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanDecisionDate)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanDecisionNotes, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanDecisionNotes, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanDecisionNotes)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanDecisionNotes" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanDecisionNotes)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanDecisionLoanDecisionTypeName, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanDecisionLoanDecisionTypeName, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanDecisionLoanDecisionTypeName)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanDecisionLoanDecisionTypeName" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanDecisionLoanDecisionTypeName)" disabled />
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanDecisionIsPaidFromSalary, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanDecisionIsPaidFromSalary, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanDecisionIsPaidFromSalary)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 @Html.CheckBoxFor(model => model.Instance.LoanDecisionIsPaidFromSalary.Value, new { @disabled = "disabled" ,@class="form-control" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanDecisionReason, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanDecisionReason, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanDecisionReason)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanDecisionReason" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanDecisionReason)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanType, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanType, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanType)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanType" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanType)" disabled />
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanGenerationStatusName, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanGenerationStatusName, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanGenerationStatusName)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanGenerationStatusName" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanGenerationStatusName)" disabled />
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Instance.LoanStatusName, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Instance.LoanStatusName, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Instance.LoanStatusName)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                 <input type="text" id="txtLoanStatusName" class="form-control" value="@Html.DisplayFor(model => model.Instance.LoanStatusName)" disabled />
								        </div>
									</div>
								</div>
							</div>

                            <div class="form-actions">
                                <button type="button" class="btn btn-primary mr-1">
								        @Html.ActionLink((string)@ViewBag.Update, "Edit", new {
																	product = Model.Instance.ProductId })
                                </button>
								<button type="button" class="btn btn-warning">
							        @Html.ActionLink((string)@ViewBag.Back, "Index")
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.IncomingLoanVwTitle @if(Model.IncomingLoanVwViewModel.List.Count == 0) {<span class="tag tag-default">@Model.IncomingLoanVwViewModel.List.Count</span>} else {<span class="tag tag-danger">@Model.IncomingLoanVwViewModel.List.Count</span> }</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse out">
                <div class="card-block card-dashboard">
                    <button class="btn btn-success" type="button">
                        @Html.ActionLink((string)ViewBag.Insert + " " + (string)ViewBag.IncomingLoanVwTitle, "Create", "IncomingLoan")
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
					        <tr>
           
					            <th></th>
					        </tr>
                        </thead>
                        <tbody>
        @foreach (var item in Model.IncomingLoanVwViewModel.List)
        {
				            <tr>
				                <td>
									<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
										<button type="button" class="btn btn-info">
					                    	@Html.ActionLink((string)ViewBag.Details, "Details", "IncomingLoan",
                        					new
											{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-warning">
					                    	@Html.ActionLink((string)ViewBag.Update, "Edit", "IncomingLoan",
                        					new
                        					{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.LoanProductId" data-url="@Url.Action("Delete", "IncomingLoan")">@ViewBag.Delete</button>
                                    </div>
                                </td>
                            </tr>
				        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.LoanChangeVwTitle @if(Model.LoanChangeVwViewModel.List.Count == 0) {<span class="tag tag-default">@Model.LoanChangeVwViewModel.List.Count</span>} else {<span class="tag tag-danger">@Model.LoanChangeVwViewModel.List.Count</span> }</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse out">
                <div class="card-block card-dashboard">
                    <button class="btn btn-success" type="button">
                        @Html.ActionLink((string)ViewBag.Insert + " " + (string)ViewBag.LoanChangeVwTitle, "Create", "LoanChange")
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
					        <tr>
					            <th>
					                @Html.DisplayNameFor(model => model.LoanChangeVwViewModel.Instance.FromLoanProductEmployeeId)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.LoanChangeVwViewModel.Instance.FromLoanProductEmployeeFullName)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.LoanChangeVwViewModel.Instance.FromLoanLoanType)
					            </th>
           
					            <th></th>
					        </tr>
                        </thead>
                        <tbody>
        @foreach (var item in Model.LoanChangeVwViewModel.List)
        {
				            <tr>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.FromLoanProductEmployeeId)
                				</td>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.FromLoanProductEmployeeFullName)
                				</td>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.FromLoanLoanType)
                				</td>
				                <td>
									<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
										<button type="button" class="btn btn-info">
					                    	@Html.ActionLink((string)ViewBag.Details, "Details", "LoanChange",
                        					new
											{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-warning">
					                    	@Html.ActionLink((string)ViewBag.Update, "Edit", "LoanChange",
                        					new
                        					{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.LoanProductId" data-url="@Url.Action("Delete", "LoanChange")">@ViewBag.Delete</button>
                                    </div>
                                </td>
                            </tr>
				        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.FromLoanChangeVwTitle @if(Model.FromLoanChangeVwViewModel.List.Count == 0) {<span class="tag tag-default">@Model.FromLoanChangeVwViewModel.List.Count</span>} else {<span class="tag tag-danger">@Model.FromLoanChangeVwViewModel.List.Count</span> }</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse out">
                <div class="card-block card-dashboard">
                    <button class="btn btn-success" type="button">
                        @Html.ActionLink((string)ViewBag.Insert + " " + (string)ViewBag.FromLoanChangeVwTitle, "Create", "LoanChange")
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
					        <tr>
					            <th>
					                @Html.DisplayNameFor(model => model.FromLoanChangeVwViewModel.Instance.FromLoanProductEmployeeId)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.FromLoanChangeVwViewModel.Instance.FromLoanProductEmployeeFullName)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.FromLoanChangeVwViewModel.Instance.FromLoanLoanType)
					            </th>
           
					            <th></th>
					        </tr>
                        </thead>
                        <tbody>
        @foreach (var item in Model.FromLoanChangeVwViewModel.List)
        {
				            <tr>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.FromLoanProductEmployeeId)
                				</td>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.FromLoanProductEmployeeFullName)
                				</td>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.FromLoanLoanType)
                				</td>
				                <td>
									<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
										<button type="button" class="btn btn-info">
					                    	@Html.ActionLink((string)ViewBag.Details, "Details", "LoanChange",
                        					new
											{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-warning">
					                    	@Html.ActionLink((string)ViewBag.Update, "Edit", "LoanChange",
                        					new
                        					{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.LoanProductId" data-url="@Url.Action("Delete", "LoanChange")">@ViewBag.Delete</button>
                                    </div>
                                </td>
                            </tr>
				        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.OutgoingLoanVwTitle @if(Model.OutgoingLoanVwViewModel.List.Count == 0) {<span class="tag tag-default">@Model.OutgoingLoanVwViewModel.List.Count</span>} else {<span class="tag tag-danger">@Model.OutgoingLoanVwViewModel.List.Count</span> }</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse out">
                <div class="card-block card-dashboard">
                    <button class="btn btn-success" type="button">
                        @Html.ActionLink((string)ViewBag.Insert + " " + (string)ViewBag.OutgoingLoanVwTitle, "Create", "OutgoingLoan")
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered mb-0">
                        <thead class="bg-primary table-head-color">
					        <tr>
					            <th>
					                @Html.DisplayNameFor(model => model.OutgoingLoanVwViewModel.Instance.MainWorkPlaceName)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.OutgoingLoanVwViewModel.Instance.ApprovedAmount)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.OutgoingLoanVwViewModel.Instance.NetAmount)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.OutgoingLoanVwViewModel.Instance.ProfitAmount)
					            </th>
           
					            <th></th>
					        </tr>
                        </thead>
                        <tbody>
        @foreach (var item in Model.OutgoingLoanVwViewModel.List)
        {
				            <tr>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.MainWorkPlaceName)
                				</td>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.ApprovedAmount)
                				</td>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.NetAmount)
                				</td>
                				<td>
                    				 @Html.DisplayFor(modelItem => item.ProfitAmount)
                				</td>
				                <td>
									<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
										<button type="button" class="btn btn-info">
					                    	@Html.ActionLink((string)ViewBag.Details, "Details", "OutgoingLoan",
                        					new
											{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-warning">
					                    	@Html.ActionLink((string)ViewBag.Update, "Edit", "OutgoingLoan",
                        					new
                        					{
												loan = item.LoanProductId
                        					}, null)
                                        </button>
                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.LoanProductId" data-url="@Url.Action("Delete", "OutgoingLoan")">@ViewBag.Delete</button>
                                    </div>
                                </td>
                            </tr>
				        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@ViewBag.No</span></button>
                <h4 class="modal-title" id="deleteModalLabel">@ViewBag.Delete @ViewBag.ModuleName</h4>
            </div>
            <div id="deleteModalBody" class="modal-body"></div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(function () {
        $("#deleteModal").modal("hide");  // initially hides the modal pop-up until needed

        $(".deleteLink").on("click", function () {
		var url=$(this).data("url");
            $.get(url, { id: $(this).data("id") }, function (data) {
                $("#deleteModalBody").html(data);

                $("#deleteModal").modal("show");  // shows the modal pop-up now that we have our partial view
            });

        });
    });
</script>
	<script>
	$(document).ready(function () {
		$('table').each(function(e){
		
				var table = $(this).context;
                var len = table.rows.length;
                if (len == 1) 
                {             
					table = table.tBodies[0];
                    // Create an empty <tr> element
                    var row = table.insertRow(0);

                    //// Insert new cell
                    var cell1 = row.insertCell(0);
                    cell1.colSpan = 12; cell1.align = "center";
                    cell1.innerText = '@ViewBag.NoRecords';                    
                }
                 
            });
	    });
	</script>
}
