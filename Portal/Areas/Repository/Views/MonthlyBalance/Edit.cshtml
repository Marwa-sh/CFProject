@model Cf.Data.MonthlyBalance
@using (Html.BeginForm())
{
	<div class="row">
        <div class="col-xs-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">@ViewBag.Action @ViewBag.ModuleName</h4>
                    <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                    <div class="heading-elements">
                        <ul class="list-inline mb-0">
                            <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                            <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                            <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-body collapse in">
                    <div class="card-block">
                        <form class="form">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-body">
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Id, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Id)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                <input type="text" id="txtId" class="form-control" value="@Html.DisplayFor(model => model.Id)" disabled />
								                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Employee, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Employee, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Employee)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.DropDownList("Employee", (SelectList)@ViewBag.EmployeeList, htmlAttributes: new { @class = "form-control" })
								                @Html.ValidationMessageFor(model => model.Employee, "", new { @class = "text-danger" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.PaymentGroup, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.PaymentGroup, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.PaymentGroup)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.DropDownList("PaymentGroup", (SelectList)@ViewBag.PaymentGroupList, htmlAttributes: new { @class = "form-control" })
								                @Html.ValidationMessageFor(model => model.PaymentGroup, "", new { @class = "text-danger" })
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Month, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Month, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Month)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.TextBoxFor(model => model.Month, "{0:dd/MM/yyyy}", htmlAttributes: new { @class = "form-control IsDate" })
								                @Html.ValidationMessageFor(model => model.Month, "", new { @class = "text-danger" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Opening, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Opening, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Opening)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.EditorFor(model => model.Opening, new { htmlAttributes = new { @class = "form-control" } })
								                @Html.ValidationMessageFor(model => model.Opening, "", new { @class = "text-danger" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.NormalLoans, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.NormalLoans, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.NormalLoans)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.EditorFor(model => model.NormalLoans, new { htmlAttributes = new { @class = "form-control" } })
								                @Html.ValidationMessageFor(model => model.NormalLoans, "", new { @class = "text-danger" })
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.IncomingLoans, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.IncomingLoans, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.IncomingLoans)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.EditorFor(model => model.IncomingLoans, new { htmlAttributes = new { @class = "form-control" } })
								                @Html.ValidationMessageFor(model => model.IncomingLoans, "", new { @class = "text-danger" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Restitution, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Restitution, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Restitution)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.EditorFor(model => model.Restitution, new { htmlAttributes = new { @class = "form-control" } })
								                @Html.ValidationMessageFor(model => model.Restitution, "", new { @class = "text-danger" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.OutgoingLoans, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.OutgoingLoans, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.OutgoingLoans)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.EditorFor(model => model.OutgoingLoans, new { htmlAttributes = new { @class = "form-control" } })
								                @Html.ValidationMessageFor(model => model.OutgoingLoans, "", new { @class = "text-danger" })
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.SalaryPayment, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.SalaryPayment, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.SalaryPayment)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.EditorFor(model => model.SalaryPayment, new { htmlAttributes = new { @class = "form-control" } })
								                @Html.ValidationMessageFor(model => model.SalaryPayment, "", new { @class = "text-danger" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.CashPayment, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.CashPayment, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.CashPayment)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								                @Html.EditorFor(model => model.CashPayment, new { htmlAttributes = new { @class = "form-control" } })
								                @Html.ValidationMessageFor(model => model.CashPayment, "", new { @class = "text-danger" })
								        </div>
									</div>
								</div>
							</div>

                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary mr-1">
                                    @ViewBag.Save
                                </button>
                                <button type="button" class="btn btn-warning">
                                    @Html.ActionLink((string)ViewBag.Back, "Index")
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    <script>
		$(function () {
            $.validator.addMethod('date',
            function (value, element) {
                if (this.optional(element)) {
                    return true;
                }
                var ok = true;
                try {
                    $.datepicker.parseDate('dd/mm/yy', value);
                }
                catch (err) {
                    ok = false;
                }
                return ok;
            });
            $(".IsDate").datepicker({ dateFormat: 'dd/mm/yy', changeYear: true });
        });
    </script>
}
