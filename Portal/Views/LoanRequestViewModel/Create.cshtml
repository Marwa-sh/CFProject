@model Cf.ViewModels.LoanRequestViewModel

@using (Html.BeginForm())
{

    <div class="row">
        <div class="col-xs-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">@ViewBag.Action @ViewBag.ModuleName</h4>
                    <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                    <div class="heading-elements">
                        <ul class="list-inline mb-0">
                            <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                            <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                            <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-body collapse in">
                    <div class="card-block">
                         
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            @Html.Partial("~/Views/Product/Create.cshtml", Model)
                            @Html.Partial("~/Views/Request/Create.cshtml", Model)

                            @Html.Partial("~/Views/LoanRequest/Create.cshtml", Model)
                            @Html.Partial("~/Views/RefundableProduct/Create.cshtml", Model)

                        <div class="row">
                            <div class="col-sm-5"></div>
                            <div class="col-sm-2">
                                <button type="button" id="discover" class="btn btn-primary mr-1">
                                    Discover
                                </button>
                            </div>
                            <div class="col-sm-5"></div>

                        </div>

                        <br />
                                <button type="submit" class="btn btn-primary mr-1">
                                    @ViewBag.Save
                                </button>
                                <button type="button" class="btn btn-warning">
                                    @Html.ActionLink((string)ViewBag.Back, "Index")
                                </button>
                            </div>
                         
                    </div>
                </div>
            </div>
        </div>
     
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        $(function () {

            $("#discover").click(function () {

                var productId = $("#RequestProduct_ProductType").val();
                var employeeId = $("#RequestProduct_Employee").val();
                var amount = $("#Request_Amount").val();
                var period=$("#RequestProductProductRefundableProduct_PaymentPeriod").val();

                if (productId == '' || employeeId == '' || amount == '' || period == '')
                {
                    swal("", "الحقول التالية مطلوبة: اسم الموظف، نوع السلفة، المبلغ والمدة", "error");
                }
                else {
                    $.ajax({
                        type: "POST",
                        url: "/LoanRequestViewModel/Calculate",
                        data: '{employeeId: ' + $("#RequestProduct_Employee").val() + ', productTypeId:' + $("#RequestProduct_ProductType").val() + ',amount: ' + $("#Request_Amount").val() + ',period: ' + $("#RequestProductProductRefundableProduct_PaymentPeriod").val() + '}'                        
                   ,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            for (var i = 0; i < response.length; i++) {
                                var temp = response[i];

                                $("#RequestProductProductRefundableProduct_Installment").val(temp.Installment);
                                $("#RequestProductProductRefundableProduct_NetAmount").val(temp.NetAmount);
                                $("#RequestProductProductRefundableProduct_ProfitAmount").val(temp.ProfitAmount);

                            }


                        },
                        failure: function (response) {
                            alert(response.responseText);
                        },
                        error: function (response) {
                            alert(response.responseText);
                        }
                    });
                }

            });
        });
</script>
    <script>
        $(function () {
            $.validator.addMethod('date',
            function (value, element) {
                if (this.optional(element)) {
                    return true;
                }
                var ok = true;
                try {
                    $.datepicker.parseDate('dd/mm/yy', value);
                }
                catch (err) {
                    ok = false;
                }
                return ok;
            });
            $(".IsDate").datepicker({ dateFormat: 'dd/mm/yy', changeYear: true });
        });
    (function ($) {
        $.widget("custom.combobox", {
            _create: function () {
                this.wrapper = $("<span>")
                  .addClass("custom-combobox ")
                  .insertAfter(this.element);

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
            },

            _createAutocomplete: function () {
                var selected = this.element.children(":selected"),
                  value = selected.val() ? selected.text() : "";

                this.input = $("<input>")
                  .appendTo(this.wrapper)
                  .val(value)
                  .attr("title", "")
                  .addClass("form-control custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                  .autocomplete({
                      delay: 0,
                      minLength: 0,
                      source: $.proxy(this, "_source")
                  })
                  .tooltip({
                      tooltipClass: "ui-state-highlight"
                  });

                this._on(this.input, {
                    autocompleteselect: function (event, ui) {
                        ui.item.option.selected = true;
                        this._trigger("select", event, {
                            item: ui.item.option
                        });
                    },

                    autocompletechange: "_removeIfInvalid"
                });
            },

            //_createShowAllButton: function () {
            //    var input = this.input,
            //      wasOpen = false;

            //    $("<a>")
            //      .attr("tabIndex", -1)
            //      .tooltip()

            //      .appendTo(this.wrapper)
            //      .button({
            //          icons: {
            //              primary: "ui-icon-triangle-1-s"
            //          },
            //          text: false
            //      })
            //      .removeClass("ui-corner-all")
            //      .addClass("custom-combobox-toggle ui-corner-right")
            //      .mousedown(function () {
            //          wasOpen = input.autocomplete("widget").is(":visible");
            //      })
            //      .click(function () {
            //          input.focus();

            //          // Close if already visible
            //          if (wasOpen) {
            //              return;
            //          }

            //          // Pass empty string as value to search for, displaying all results
            //          input.autocomplete("search", "");
            //      });
            //},

            _source: function (request, response) {
                var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                response(this.element.children("option").map(function () {
                    var text = $(this).text();
                    if (this.value && (!request.term || matcher.test(text)))
                        return {
                            label: text,
                            value: text,
                            option: this
                        };
                }));
            },

            _removeIfInvalid: function (event, ui) {

                // Selected an item, nothing to do
                if (ui.item) {
                    return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                  valueLowerCase = value.toLowerCase(),
                  valid = false;
                this.element.children("option").each(function () {
                    if ($(this).text().toLowerCase() === valueLowerCase) {
                        this.selected = valid = true;
                        return false;
                    }
                });

                // Found a match, nothing to do
                if (valid) {
                    return;
                }

                // Remove invalid value
                this.input
                  .val("")
                this.element.val("");
                this._delay(function () {
                    this.input.tooltip("close").attr("title", "");
                }, 2500);
                this.input.data("ui-autocomplete").term = "";
            },

            _destroy: function () {
                this.wrapper.remove();
                this.element.show();
            }
        });
    })(jQuery);
    $(document).ready(function () {
        $('.combobox').combobox();

    });
		
    </script>
}
