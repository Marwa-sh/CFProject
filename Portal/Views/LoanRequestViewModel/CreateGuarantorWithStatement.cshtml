@model Portal.ViewModels.GuarantorWithStatmentViewModel

@using (Html.BeginForm())
{
    <h4 class="card-title">@ViewBag.Insert  </h4>
    <div class="row">
        <div class="col-xs-12">
            <div class="card">
                
                <div class="card-body collapse in">
                    <div class="card-block">
                        <form class="form">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-body">
                                <div class="row">
                                   
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            
                                            @Html.LabelFor(model => model.Guarantor.SubNumber, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Guarantor.SubNumber)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.Guarantor.SubNumber, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Guarantor.SubNumber, "", new { @class = "text-danger" })
                                            <input type="hidden" name="Guarantor.RefundableProduct" id="txtProductId" class="form-control" value="@ViewBag.ProductId" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @*@Html.LabelFor(model => model.Employee, htmlAttributes: new { @class = "control-label" })*@
                                            @Html.LabelFor(model => model.Guarantor.Employee, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Guarantor.Employee)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.DropDownListFor(model => model.Guarantor.Employee, (SelectList)@ViewBag.EmployeeList, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Guarantor.Employee, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">

                                            @Html.LabelFor(model => model.Guarantor.Notes, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Guarantor.Notes)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.Guarantor.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Guarantor.Notes, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    
                                </div>

                                <div class="row">
                                    
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @*@Html.LabelFor(model => model.GrossSalary, htmlAttributes: new { @class = "control-label" })*@
                                            @Html.LabelFor(model => model.GuarantorStatement.GrossSalary, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.GuarantorStatement.GrossSalary)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.GuarantorStatement.GrossSalary, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.GuarantorStatement.GrossSalary, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @*@Html.LabelFor(model => model.DeductionsAmount, htmlAttributes: new { @class = "control-label" })*@
                                            @Html.LabelFor(model => model.GuarantorStatement.DeductionsAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.GuarantorStatement.DeductionsAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.GuarantorStatement.DeductionsAmount, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.GuarantorStatement.DeductionsAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @*@Html.LabelFor(model => model.NetSalary, htmlAttributes: new { @class = "control-label" })*@
                                            @Html.LabelFor(model => model.GuarantorStatement.NetSalary, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.GuarantorStatement.NetSalary)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.GuarantorStatement.NetSalary, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.GuarantorStatement.NetSalary, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">

                                    
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            @*@Html.LabelFor(model => model.ExceptionalIncome, htmlAttributes: new { @class = "control-label" })*@
                                            @Html.LabelFor(model => model.GuarantorStatement.ExceptionalIncome, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.GuarantorStatement.ExceptionalIncome)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                            @Html.EditorFor(model => model.GuarantorStatement.ExceptionalIncome, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.GuarantorStatement.ExceptionalIncome, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary mr-1">
                                    @ViewBag.Save
                                </button>
                                <button type="button" class="btn btn-warning">
                                    @Html.ActionLink((string)ViewBag.Back, "Details", new   { id= @ViewBag.ProductId })
                                </button>
                            </div>
                        </form>
                    </div>
                    </div>
                </div>
            </div>
        </div>
     
}
@section Scripts {
@Scripts.Render("~/bundles/jqueryval")
<script>
        
        (function ($) {
            $.widget("custom.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                      .addClass("custom-combobox ")
                      .insertAfter(this.element);

                    this.element.hide();
                    this._createAutocomplete();
                    //this._createShowAllButton();
                },

                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                      value = selected.val() ? selected.text() : "";

                    this.input = $("<input>")
                      .appendTo(this.wrapper)
                      .val(value)
                      .attr("title", "")
                      .addClass("form-control custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                      .autocomplete({
                          delay: 0,
                          minLength: 0,
                          source: $.proxy(this, "_source")
                      })
                      .tooltip({
                          tooltipClass: "ui-state-highlight"
                      });

                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                      valueLowerCase = value.toLowerCase(),
                      valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    this.input
                      .val("")
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.data("ui-autocomplete").term = "";
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });
        })(jQuery);
        $(document).ready(function () {
            $('.combobox').combobox();

        });

</script>
}
