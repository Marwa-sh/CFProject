@model Cf.ViewModels.ProductVwViewModel

@using Cf.Services;
@using Cf.Data;

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.Action @ViewBag.ModuleName</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse in">
                <div class="card-block">
                    <form class="form">
                        @*@Html.Partial("~/Views/Product/Details.cshtml", Model)
                            @Html.Partial("~/Views/Request/Details.cshtml", Model)

                            @Html.Partial("~/Views/LoanRequest/Details.cshtml", Model)
                            @Html.Partial("~/Views/RefundableProduct/Details.cshtml", Model)*@

                        <div class="form-body">
                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.EmployeeId, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.Instance.EmployeeId, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Instance.EmployeeId)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtEmployeeId" class="form-control" value="@Html.DisplayFor(model => model.Instance.EmployeeId)" disabled />
                                        <input type="hidden" name="Product.Id" id="txtProductId" class="form-control" value="@Html.DisplayFor(model => model.Instance.Id)" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.EmployeeFullName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.Instance.EmployeeFullName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Instance.EmployeeFullName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtEmployeeFullName" class="form-control" value="@Html.DisplayFor(model => model.Instance.EmployeeFullName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.ProductTypeName, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.Instance.ProductTypeName, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Instance.ProductTypeName)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtProductTypeName" class="form-control" value="@Html.DisplayFor(model => model.Instance.ProductTypeName)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.Amount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.Instance.Amount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.Instance.Amount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtAmount" class="form-control" value="@Html.DisplayFor(model => model.Instance.Amount)" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.Notes, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.Instance.Notes, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.Instance.Notes)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtNotes" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.Instance.Notes)" disabled />
                                    </div>
                                </div>                             
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.Date, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.Instance.Attachment, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.Instance.Attachment)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtAttachment" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.Instance.Attachment)" disabled />
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.Date, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.Instance.Date, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.Instance.Date)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtDate" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.Instance.Date)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.Amount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.Instance.Amount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.Instance.Amount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtAmount" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.Instance.Amount)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.NetIncome, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.NetIncome, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.NetIncome)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtNetIncome" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.NetIncome)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.TotalDeduction, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.TotalDeduction, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.TotalDeduction)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtTotalDeduction" class="form-control" value="@Html.DisplayFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.Instance.TotalDeduction)" disabled />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">

                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.PaymentPeriod, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.PaymentPeriod, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.PaymentPeriod)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtPaymentPeriod" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.PaymentPeriod)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.Installment, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.Installment, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.Installment)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtInstallment" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.Installment)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.NetAmount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.NetAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.NetAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtNetAmount" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.NetAmount)" disabled />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Instance.ProfitAmount, htmlAttributes: new { @class = "control-label" })*@
                                        @Html.LabelFor(model => model.RefundableProductVwViewModel.Instance.ProfitAmount, new Dictionary<string, Object>
                                                { { "class", "control-label" },
                                                  {"title", Html.ToolTipMessageFor(model => model.RefundableProductVwViewModel.Instance.ProfitAmount)},
                                                  {"data-toggle", "tooltip"},
                                                  {"data-placement", "bottom"}
                                                })
                                        <input type="text" id="txtProfitAmount" class="form-control" value="@Html.DisplayFor(model => model.RefundableProductVwViewModel.Instance.ProfitAmount)" disabled />
                                    </div>
                                </div>
                            </div>                            
                        </div>

                        <div class="form-actions">
                            <button type="button" class="btn btn-primary mr-1">
                                @Html.ActionLink((string)@ViewBag.Update, "Edit", new
                               {
                                   id = Model.Instance.Id
                               })
                            </button>
                            <button type="button" class="btn btn-warning">
                                @Html.ActionLink((string)@ViewBag.Back, "Index")
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">
                    @ViewBag.TitleGuarantor @if (Model.RefundableProductVwViewModel.GuarantorVwViewModel.List.Count == 0)
                    {<span class="tag tag-default">@Model.RefundableProductVwViewModel.GuarantorVwViewModel.List.Count</span>}
                    else
                    {<span class="tag tag-danger">@Model.RefundableProductVwViewModel.GuarantorVwViewModel.List.Count</span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-danger createLink" data-original-title="@ViewBag.Insert" id="CreateG" data-url="@Url.Action("CreateGuarantorWithStatement", "LoanRequestViewModel")">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table class="table table-bordered mb-0">
                        <thead class="thead-inverse">
                            <tr>
                                @*<th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.Id)
                                </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.SubNumber)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeId)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeFullName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.EmployeeCategoryName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RefundableProductVwViewModel.GuarantorVwViewModel.Instance.GuarantorStatusName)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RefundableProductVwViewModel.GuarantorVwViewModel.List)
                            {
                            <tr>
                                @*<td>
                                    @Html.DisplayFor(modelItem => item.Id)
                                </td>*@
                                <td>
                                    @Html.DisplayFor(modelItem => item.SubNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.EmployeeId)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.EmployeeFullName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.EmployeeDepartmentSalaryWorkPlaceMainWorkPlaceName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.EmployeeCategoryName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.GuarantorStatusName)
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                        <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("EditGuarantorWithStatement", "LoanRequestViewModel")">@ViewBag.Update</button>
                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteGuarantorWithStatement", "LoanRequestViewModel")">@ViewBag.Delete</button>

                                    </div>
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title"></h4>
                <h4 class="card-title">
                    @ResourceServices.GetString(Cf.Data.Resources.ResourceBase.Culture, "ExceptionalAmountType", "Exceptional income")
                    @if (Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome).ToList().Count == 0)
                    {<span class="tag tag-default">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome).ToList().Count</span>}
                    else
                    {<span class="tag tag-danger">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome).ToList().Count</span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-danger createLinkAmount" data-original-title="@ViewBag.Insert" id="CreateExceptionalAmount" data-id='@ExceptionalAmountTypeEnum.ExceptionalIncome.GetHashCode()' data-url="@Url.Action("CreateExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table id="Result" class="table table-bordered mb-0">
                        <thead class="thead-inverse">
                            <tr>
                                @*<th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Id)
                                </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Amount)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.ExceptionalAmountTypeIsIncome)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalIncome))
                            {
                                <tr>
                                    @*<td>
                                        @Html.DisplayFor(modelItem => item.Id)
                                    </td>*@
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Amount)
                                    </td>
                                    <td>
                                        @Html.CheckBoxFor(modelItem => item.ExceptionalAmountTypeIsIncome, new { @disabled = "disabled" })
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                            <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("editExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Update</button>


                                            <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Delete</button>

                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title"></h4>
                <h4 class="card-title">
                    @ResourceServices.GetString(Cf.Data.Resources.ResourceBase.Culture, "ExceptionalAmountType", "Exceptional deduction")
                    @if (Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction).ToList().Count == 0)
                    {<span class="tag tag-default">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction).ToList().Count </span>}
                    else
                    {<span class="tag tag-danger">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction).ToList().Count </span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-danger createLinkAmount" data-original-title="@ViewBag.Insert" id="CreateExceptionalAmount" data-id="@ExceptionalAmountTypeEnum.ExceptionalDeduction.GetHashCode()" data-url="@Url.Action("createExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table id="Result" class="table table-bordered mb-0">
                        <thead class="thead-inverse">
                            <tr>
                                @*<th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Id)
                                </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Amount)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.ExceptionalAmountTypeIsIncome)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.ExceptionalDeduction))
                            {
                            <tr>
                                @*<td>
                                    @Html.DisplayFor(modelItem => item.Id)
                                </td>*@
                                <td>
                                    @Html.DisplayFor(modelItem => item.Amount)
                                </td>
                                <td>
                                    @Html.CheckBoxFor(modelItem => item.ExceptionalAmountTypeIsIncome, new { @disabled = "disabled" })
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                        <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("editExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Update</button>


                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Delete</button>

                                    </div>
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title"></h4>
                <h4 class="card-title">
                    @ResourceServices.GetString(Cf.Data.Resources.ResourceBase.Culture, "ExceptionalAmountType", "Net deduction")
                    @if (Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction).ToList().Count == 0)
                     {<span class="tag tag-default">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction).ToList().Count</span>}
                     else
                     {<span class="tag tag-danger">@Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction).ToList().Count</span> }
                </h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-plus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse ">
                <div class="card-block card-dashboard">
                    <button type="button" class="btn btn-danger createLinkAmount" data-original-title="@ViewBag.Insert" id="CreateExceptionalAmount" data-id="@ExceptionalAmountTypeEnum.NetDeduction.GetHashCode()" data-url="@Url.Action("CreateExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Insert</button>

                </div>
                <div class="table-responsive">
                    <table id="Result" class="table table-bordered mb-0">
                        <thead class="thead-inverse">
                            <tr>
                                @*<th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Id)
                                </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.Amount)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.Instance.ExceptionalAmountTypeIsIncome)
                                </th>

                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RequestVwViewModel.LoanRequestVwViewModel.ExceptionalAmountVwViewModel.List.Where(c => c.ExceptionalAmountTypeId == (int)ExceptionalAmountTypeEnum.NetDeduction))
                            {
                            <tr>
                                @*<td>
                                    @Html.DisplayFor(modelItem => item.Id)
                                </td>*@
                                <td>
                                    @Html.DisplayFor(modelItem => item.Amount)
                                </td>
                                <td>
                                    @Html.CheckBoxFor(modelItem => item.ExceptionalAmountTypeIsIncome, new { @disabled = "disabled" })
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                                        <button type="button" class="btn btn-warning editLink" data-id="@item.Id" data-original-title="@ViewBag.Update" id="CreateG" data-url="@Url.Action("EditExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Update</button>


                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.Id" data-url="@Url.Action("DeleteExceptionalAmount", "LoanRequestViewModel")">@ViewBag.Delete</button>

                                    </div>
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="FieldsModal" tabindex="-1" role="dialog" aria-labelledby="fieldsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@ViewBag.No</span></button>
                <h4 class="modal-title" id="fieldsModalLabel">  </h4>
            </div>
            <div id="fieldsModalBody" class="modal-body">

            </div>

        </div>
    </div>
</div>
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@ViewBag.No</span></button>
                <h4 class="modal-title" id="deleteModalLabel">@ViewBag.Delete</h4>
            </div>
            <div id="deleteModalBody" class="modal-body"></div>

        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/Adminjquiry")
    <script>
        $(document).ready(function () {

            $('table').each(function (e) {
                var table = $(this).context;

                var len = table.rows.length;
                if (len == 1) {
                    // Create an empty <tr> element and add it to the 1st position of the table:
                    var row = table.insertRow(1);

                    //// Insert new cell
                    var cell1 = row.insertCell(0);
                    cell1.colSpan = 12;
                    cell1.innerText = '@ViewBag.NoRecords';
                    cell1.align = "center";
                }

            });

        });
        $(function () {
            $("#FieldsModal").modal("hide");  // initially hides the modal pop-up until needed

            $(".createLink").on("click", function () {
                var url = $(this).data("url");

                $.get(url, { id: $("#txtProductId").val() }, function (data) {
                    $("#fieldsModalBody").html(data);

                    $("#FieldsModal").modal("show");  // shows the modal pop-up now that we have our partial view
                });

            });
            $(".createLinkAmount").on("click", function () {
                var url = $(this).data("url");
                var typeAmount = $(this).data("id");
                console.log(typeAmount);
                $.get(url, { id: $("#txtProductId").val(), Type: typeAmount }, function (data) {
                    $("#fieldsModalBody").html(data);

                    $("#FieldsModal").modal("show");  // shows the modal pop-up now that we have our partial view
                });

            });
            $(".editLink").on("click", function () {
                var url = $(this).data("url");

                $.get(url, { id: $(this).data("id") }, function (data) {
                    $("#fieldsModalBody").html(data);

                    $("#FieldsModal").modal("show");  // shows the modal pop-up now that we have our partial view
                });


            });
            $(function () {
                $("#deleteModal").modal("hide");  // initially hides the modal pop-up until needed

                $(".deleteLink").on("click", function () {
                    var url = $(this).data("url");
                    $.get(url, { id: $(this).data("id") }, function (data) {
                        $("#deleteModalBody").html(data);

                        $("#deleteModal").modal("show");  // shows the modal pop-up now that we have our partial view
                    });

                });
            });
        });
    </script>

}


