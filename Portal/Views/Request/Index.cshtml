@model Cf.ViewModels.RequestVwViewModel
<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
</div>
    @using (Html.BeginForm())
    {
    <div class="row">
        <div class="col-xs-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">@ViewBag.FilterOptions</h4>
                    <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                    <div class="heading-elements">
                        <ul class="list-inline mb-0">
                            <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                            <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                            <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div id="cardOptions" class="card-body collapse in">
                    <div class="card-block">
                        <form class="form">
                            <div class="form-body">
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Filter.ProductEmployeeId, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Filter.ProductEmployeeId, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Filter.ProductEmployeeId)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								            @Html.EditorFor(model => model.Filter.ProductEmployeeId, new { htmlAttributes = new { @class = "form-control" } })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Filter.ProductEmployeeFullNameContains, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Filter.ProductEmployeeFullNameContains, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Filter.ProductEmployeeFullNameContains)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								            @Html.EditorFor(model => model.Filter.ProductEmployeeFullNameContains, new { htmlAttributes = new { @class = "form-control" } })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Filter.ProductProductTypeId, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Filter.ProductProductTypeId, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Filter.ProductProductTypeId)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								            @Html.EditorFor(model => model.Filter.ProductProductTypeId, new { htmlAttributes = new { @class = "form-control" } })
								        </div>
									</div>
								</div>
                                <div class="row">
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Filter.MinDate, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Filter.MinDate, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Filter.MinDate)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								            @Html.TextBoxFor(model => model.Filter.MinDate, htmlAttributes: new { @class = "form-control IsDate" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Filter.MaxDate, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Filter.MaxDate, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Filter.MaxDate)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								            @Html.TextBoxFor(model => model.Filter.MaxDate, htmlAttributes: new { @class = "form-control IsDate" })
								        </div>
									</div>
									<div class="col-md-4">
								        <div class="form-group">
								            @*@Html.LabelFor(model => model.Filter.RequestStatusId, htmlAttributes: new { @class = "control-label" })*@
								            @Html.LabelFor(model => model.Filter.RequestStatusId, new Dictionary<string, Object>
								                { { "class", "control-label" },
								                  {"title", Html.ToolTipMessageFor(model => model.Filter.RequestStatusId)},
								                  {"data-toggle", "tooltip"},
								                  {"data-placement", "bottom"}
								                })
								            @Html.EditorFor(model => model.Filter.RequestStatusId, new { htmlAttributes = new { @class = "form-control" } })
								        </div>
									</div>
								</div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary mr-1">
                                    @ViewBag.Search
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="row">
    <div class="col-xs-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.Title</h4>
                <a class="heading-elements-toggle"><i class="icon-ellipsis font-medium-3"></i></a>
                <div class="heading-elements">
                    <ul class="list-inline mb-0">
                        <li><a data-action="collapse"><i class="icon-minus4"></i></a></li>
                        <li><a data-action="reload"><i class="icon-reload"></i></a></li>
                        <li><a data-action="expand"><i class="icon-expand2"></i></a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body collapse in">
				<div class="card-block card-dashboard">
                    <button class="btn btn-success" type="button">
                        @Html.ActionLink((string)ViewBag.Insert + " " + (string)ViewBag.ModuleName, "Create")
                    </button>
                </div>
                <div class="table-responsive">
                    <table id="Result" class="table table-bordered mb-0">
                        <thead class="thead-inverse">
					        <tr>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.ProductId)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.ProductEmployeeId)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.ProductEmployeeFullName)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.ProductEmployeeDepartmentName)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.ProductEmployeeCategoryName)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.ProductProductTypeName)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.Date)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.Amount)
					            </th>
					            <th>
					                @Html.DisplayNameFor(model => model.Instance.RequestStatusName)
					            </th>
           
					            <th></th>
					        </tr>
                        </thead>
                        <tbody>
        @foreach (var item in Model.List)
        {
				            <tr>
                				<td>
                    				@Html.DisplayFor(modelItem => item.ProductId)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.ProductEmployeeId)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.ProductEmployeeFullName)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.ProductEmployeeDepartmentName)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.ProductEmployeeCategoryName)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.ProductProductTypeName)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.Date)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.Amount)
                				</td>
                				<td>
                    				@Html.DisplayFor(modelItem => item.RequestStatusName)
                				</td>
				                <td>
									<div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
										<button type="button" class="btn btn-info">
					                    	@Html.ActionLink((string)ViewBag.Details, "Details",
                        					new
											{
												product = item.ProductId
                        					})
                                        </button>
                                        <button type="button" class="btn btn-warning">
											@Html.ActionLink((string)ViewBag.Update, "Edit",
						                    new
						                    {
													product = item.ProductId
											})

                                        </button>
                                        <button type="button" class="btn btn-danger deleteLink" data-original-title="@ViewBag.Delete" id="delete" data-id="@item.ProductId">@ViewBag.Delete</button>
                                    </div>
                                </td>
                            </tr>
				        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@ViewBag.No</span></button>
                <h4 class="modal-title" id="deleteModalLabel">@ViewBag.Delete @ViewBag.ModuleName</h4>
            </div>
            <div id="deleteModalBody" class="modal-body"></div>
           
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(function () {
            $(".IsDate").datepicker({
                // format: 'MM/DD/YYYY',
                calendarWeeks: true,
                showTodayButton: true
            });
        })
    </script>

	<script>
	$(document).ready(function () {
	        var len = $('#Result tr').length;
	        var res = $("#Result");
	        if (len == 1) {
	        }
	        else {
	            var value = $("#cardOptions").attr("class").replace("in", "out");
	            $("#cardOptions").attr("class", value);
	        }
	    });
	    $(function () {
	        $("#deleteModal").modal("hide");  // initially hides the modal pop-up until needed

	        $(".deleteLink").on("click", function () {
	            $.get('@Url.Action("Delete")', { id: $(this).data("id") }, function (data) {
	                $("#deleteModalBody").html(data);

	                $("#deleteModal").modal("show");  // shows the modal pop-up now that we have our partial view
	            });

	        });
	    });
	</script>
}
